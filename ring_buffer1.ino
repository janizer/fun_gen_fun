
//int base_array[] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50};
//int base_array[] = {2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,8,8,8,8,8,8,8,8,8,8,8,8,8,8,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3};
float base_array[] = {
1,1.01574668,1.03148946,1.04722442
,1.06294768,1.07865533,1.09434347,1.11000822
,1.12564569,1.141252,1.15682329,1.17235569
,1.18784535,1.20328842,1.21868109,1.23401953
,1.24929994,1.26451853,1.27967153,1.29475517
,1.30976573,1.32469947,1.33955269,1.35432172
,1.36900288,1.38359254,1.39808707,1.4124829
,1.42677644,1.44096414,1.45504251,1.46900803
,1.48285725,1.49658674,1.51019308,1.52367291
,1.53702289,1.5502397,1.56332006,1.57626073
,1.58905851,1.60171021,1.61421271,1.6265629
,1.63875772,1.65079414,1.66266919,1.67437991
,1.6859234,1.6972968,1.70849729,1.71952209
,1.73036847,1.74103374,1.75151525,1.7618104
,1.77191665,1.78183148,1.79155244,1.80107711
,1.81040314,1.81952821,1.82845006,1.83716648
,1.8456753,1.85397441,1.86206177,1.86993535
,1.87759322,1.88503346,1.89225424,1.89925376
,1.9060303,1.91258216,1.91890772,1.92500542
,1.93087375,1.93651124,1.9419165,1.9470882
,1.95202504,1.9567258,1.96118932,1.96541449
,1.96940027,1.97314565,1.97664973,1.97991162
,1.98293052,1.98570568,1.98823641,1.99052208
,1.99256214,1.99435606,1.99590341,1.9972038
,1.99825691,1.99906248,1.99962031,1.99993026
,1.99999225,1.99980627,1.99937237,1.99869065
,1.99776128,1.99658449,1.99516058,1.99348989
,1.99157285,1.98940992,1.98700164,1.98434861
,1.98145149,1.978311,1.97492791,1.97130307
,1.96743737,1.96333177,1.95898729,1.954405
,1.94958605,1.94453163,1.93924299,1.93372144
,1.92796835,1.92198515,1.91577333,1.90933441
,1.90267001,1.89578177,1.8886714,1.88134066
,1.87379137,1.8660254,1.85804469,1.8498512
,1.84144697,1.83283409,1.82401468,1.81499094
,1.80576511,1.79633946,1.78671635,1.77689815
,1.7668873,1.75668628,1.74629763,1.73572391
,1.72496775,1.71403182,1.70291883,1.69163154
,1.68017274,1.66854527,1.65675202,1.64479592
,1.63267992,1.62040704,1.60798031,1.59540282
,1.58267768,1.56980806,1.55679714,1.54364814
,1.53036434,1.51694902,1.50340551,1.48973717
,1.47594739,1.46203959,1.44801721,1.43388374
,1.41964267,1.40529755,1.39085192,1.37630937
,1.36167351,1.34694796,1.33213638,1.31724243
,1.30226982,1.28722225,1.27210346,1.2569172
,1.24166723,1.22635733,1.2109913,1.19557295
,1.1801061,1.16459459,1.14904227,1.13345298
,1.11783061,1.10217901,1.08650208,1.0708037
,1.05508776,1.03935816,1.0236188,1.00787358
,0.992126416,0.976381199,0.960641839,0.94491224
,0.9291963,0.913497918,0.897820986,0.882169392
,0.866547016,0.850957734,0.83540541,0.819893901
,0.804427053,0.789008703,0.773642672,0.758332772
,0.743082799,0.727896535,0.712777745,0.697730179
,0.682757567,0.667863624,0.653052041,0.638326492
,0.623690628,0.609148079,0.594702451,0.580357326
,0.566116261,0.551982788,0.53796041,0.524052607
,0.510262826,0.496594486,0.483050978,0.469635659
,0.456351856,0.443202864,0.430191942,0.417322318
,0.404597182,0.392019691,0.379592962,0.367320077
,0.35520408,0.343247976,0.331454728,0.319827262
,0.308368461,0.297081165,0.285968175,0.275032246
,0.264276089,0.253702373,0.243313718,0.233112701
,0.223101852,0.213283652,0.203660538,0.194234894
,0.185009059,0.17598532,0.167165914,0.158553029
,0.1501488,0.141955312,0.133974596,0.126208631
,0.118659344,0.111328605,0.104218233,0.097329991
,0.090665587,0.084226673,0.078014847,0.072031649
,0.066278562,0.060757014,0.055468372,0.050413949
,0.045594998,0.041012714,0.036668234,0.032562633
,0.028696932,0.025072088,0.021689,0.018548507
,0.015651388,0.012998361,0.010590084,0.008427154
,0.006510108,0.004839421,0.003415507,0.00223872
,0.00130935,0.00062763,0.000193727,7.74932E-06
,6.97431E-05,0.000379693,0.000937522,0.001743092
,0.002796203,0.004096594,0.005643942,0.007437864
,0.009477915,0.01176359,0.01429432,0.017069479
,0.020088379,0.02335027,0.026854345,0.030599734
,0.034585508,0.03881068,0.0432742,0.047974964
,0.052911804,0.058083496,0.063488759,0.069126251
,0.074994576,0.081092277,0.087417843,0.093969704
,0.100746237,0.107745761,0.114966541,0.122406785
,0.130064648,0.137938233,0.146025586,0.154324701
,0.162833522,0.171549937,0.180471786,0.189596856
,0.198922885,0.208447559,0.218168518,0.228083349
,0.238189595,0.24848475,0.258966261,0.269631528
,0.280477908,0.291502709,0.302703199,0.3140766
,0.325620091,0.337330811,0.349205855,0.361242279
,0.373437098,0.385787287,0.398289785,0.410941491
,0.423739268,0.436679942,0.449760304,0.462977111
,0.476327086,0.489806917,0.503413263,0.517142749
,0.530991971,0.544957494,0.559035856,0.573223565
,0.587517103,0.601912925,0.616407463,0.630997122
,0.645678283,0.660447307,0.675300531,0.690234271
,0.705244826,0.720328471,0.735481468,0.750700058
,0.765980468,0.781318909,0.796711576,0.812154654
,0.827644313,0.843176711,0.858747997,0.874354309
,0.889991779,0.905656528,0.921344671,0.937052319
,0.952775576,0.968510543,0.984253319,1};





//float sine[] = 0.1*sinebig;
int arr_length = (sizeof(base_array)/sizeof(float));



//to move through the loop we need to know:
//frequency
///start pos = 0 if phase_keeper == 0
///jumper = loop_length / frequency
///phase_keeper = (loop_length - start_phase) % jumper, where start_phase = 0 once,
///then phase_keeper ever on

//amplitude

//DC offset

//phase

int amplitude = 125;



//amplitude is the amount we are shrinking or growing the values in
//our base array
//if we keep all base values between 0 and 1, simple multiplication
//

int frequency = 4;

int jumper = (sizeof(base_array)/sizeof(float))/frequency;

int phase_keeper = 0;
int num_reps = (sizeof(base_array)/sizeof(float))/jumper;

//frequency is number of times loop is passed per time
//keep a counter. if freq=3, then pass loop 3 times faster,
//so take 1/3 of the number of points --> spend 1/3 the amount of time per sample
//ie jumper=3 instead of 1
//at end of loop, if number of array elements is not divisible by
//jumper (ie length % jumper != 0), find remainder and add to
//start position of next loop

int offset = 0;

//literally just add this value to all the values in the array
//but, if 5V - amplitude - offset < zero, reject
///this will need to be checked as input is given

int t = 0;
//track time, ie place in array. Will we need this in the end?

float* make_amp(float base_arr[], int amplitude) {
  float scaled_arr[400];
  for (int i = 0; i < arr_length; i++) {
    scaled_arr[i] = amplitude*base_arr[i];
}
return scaled_arr;
}

void setup() {
  Serial.flush();
  Serial.begin(9600);
  pinMode(10, OUTPUT);
  //Serial.println(arr_length);

  
}
//float the_scaled_arr[] = make_amp(base_arr[], amplitude);
void loop() {

  while (t<400) {
    //delay(2000);
    Serial.print(base_array[t]);
    //digitalWrite(10, HIGH);
    analogWrite(10, base_array[t]);   
    t=+1;
    //t = ++ jumper;
  }
  phase_keeper = (arr_length - phase_keeper) % jumper;
  t=0;

}
